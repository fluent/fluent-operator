name: Building Fluentd image (new)

on:
  workflow_dispatch:
    inputs:
      docker_tag_version:
        description: 'Fluentd image release version'
        required: true
        default: '1.17.1'

env:
  GHCR_REPO: 'ghcr.io/${{ github.repository }}/fluentd'

permissions:
  contents: read
  packages: write

jobs:
  determine-tags: 
    runs-on: ubuntu-latest
    name: Determine image tags
    outputs:
      IMAGE_BASE_TAG: ${{ steps.determine-tags.outputs.IMAGE_BASE_TAG }}
      IMAGE_MAJOR_MINOR: ${{ steps.determine-tags.outputs.IMAGE_MAJOR_MINOR }}

    steps:
      - name: Determine image version tag
        id: determine-tags
        run: |
          VERSION=${{ github.event.inputs.docker_tag_version }}
          VERSION_WITHOUT_V=${VERSION#v}
          MAJOR_MINOR=$(echo $VERSION_WITHOUT_V | cut -d. -f1-2)

          if skopeo inspect docker://${{ env.GHCR_REPO }}:${VERSION}; then
            echo "${VERSION} tag already exists, assuming we're building a patch release!"
            LATEST_PATCH_VERSION=$(skopeo list-tags docker://${{ env.GHCR_REPO }} | grep -E "${VERSION}-[0-9]+" | sort | uniq | tail -1 | tr -d \" | cut -d'-' -f2)
            NEW_PATCH_VERSION=$((LATEST_PATCH_VERSION + 1))
            IMAGE_BASE_TAG="${VERSION}-${NEW_PATCH_VERSION}"
            echo "Building patch release ${IMAGE_BASE_TAG}!"
          else
            echo "${VERSION} tag does not exist, assuming we're building a new release!"
            IMAGE_BASE_TAG="${VERSION}"
          fi
  
          echo "IMAGE_BASE_TAG=$IMAGE_BASE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_MAJOR_MINOR=$MAJOR_MINOR" >> $GITHUB_OUTPUT

  build:
    name: Build/push image 
    runs-on: ${{ matrix.runs-on }}
    needs: determine-tags
    outputs:
      tags: ${{ steps.image-metadata.outputs.tags }}
      digests: ${{ steps.build.outputs.digest }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - runs-on: ubuntu-latest
          - runs-on: ubuntu-24.04-arm
            platform: linux/arm64
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
    
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure image tags 
        id: image-metadata
        uses: docker/metadata-action@v5
        with:
          images: "${{ env.GHCR_REPO }}"
          flavor:
            latest=false
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.determine-tags.outputs.IMAGE_BASE_TAG }}
            type=raw,value=v${{ needs.determine-tags.outputs.IMAGE_BASE_TAG }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: cmd/fluent-watcher/fluentd/Dockerfile.amd64.new
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          outputs: type=image,"name=${{ env.GHCR_REPO }}",push-by-digest=true,name-canonical=true,push=true

  manifest:
    name: Create image manifest
    runs-on: ubuntu-latest
    needs: [build, determine-tags]
    steps:
      - uses: int128/docker-manifest-create-action@v2
        with:
          push: true
          tags: ${{ needs.build.outputs.tags }}
          sources: ${{ needs.build.outputs.digests }}
            
    