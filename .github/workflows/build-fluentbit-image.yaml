name: Publish Fluent-bit image

on:
  push:
    branches:
      - main
    paths:
      - cmd/fluent-watcher/fluentbit/VERSION
  workflow_dispatch:

env:
  GHCR_REPO: 'ghcr.io/${{ github.repository }}/fluent-bit'
  DOCKERHUB_REPO: 'kubesphere/fluent-bit'

permissions:
  contents: read

jobs:
  build-info:
    name: Get build info
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.determine-tags.outputs.version }}
      image-base-tag: ${{ steps.determine-tags.outputs.image-base-tag }}
      image-major-minor: ${{ steps.determine-tags.outputs.image-major-minor }}

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }}

      - name: Determine image version tag
        id: determine-tags
        run: |
          VERSION=$(cat cmd/fluent-watcher/fluentbit/VERSION)  # Read the version from the VERSION file
          VERSION_WITHOUT_V=${VERSION#v}
          MAJOR_MINOR=$(echo $VERSION_WITHOUT_V | cut -d. -f1-2)

          if skopeo inspect docker://${{ env.GHCR_REPO }}:${VERSION}; then
            echo "${VERSION} tag already exists, assuming we're building a patch release!"
            LATEST_PATCH_VERSION=$(skopeo list-tags docker://${{ env.GHCR_REPO }} | grep -E "${VERSION}-[0-9]+" | sort | uniq | tail -1 | tr -d \" | cut -d'-' -f2 | tr -d ',')
            NEW_PATCH_VERSION=$((LATEST_PATCH_VERSION + 1))
            IMAGE_BASE_TAG="${VERSION}-${NEW_PATCH_VERSION}"
            echo "Building patch release ${IMAGE_BASE_TAG}!"
          else
            echo "${VERSION} tag does not exist, assuming we're building a new release!"
            IMAGE_BASE_TAG="${VERSION}"
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "image-base-tag=$IMAGE_BASE_TAG" >> $GITHUB_OUTPUT
          echo "image-major-minor=$MAJOR_MINOR" >> $GITHUB_OUTPUT

  build-tags:
    name: Get image tags
    runs-on: ubuntu-latest
    needs: [build-info]

    outputs:
      tags: ${{ steps.image-metadata.outputs.tags }}
      labels: ${{ steps.image-metadata.outputs.labels }}
      debug-tags: ${{ steps.debug-image-metadata.outputs.tags }}
      debug-labels: ${{ steps.debug-image-metadata.outputs.labels }}

    steps:
      - name: Configure image tags
        id: image-metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: |
            ${{ env.GHCR_REPO }}
          flavor:
            latest=false
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.build-info.outputs.image-base-tag }}
            type=raw,value=v${{ needs.build-info.outputs.image-base-tag }}
            type=raw,value=${{ needs.build-info.outputs.image-major-minor }}
            type=raw,value=v${{ needs.build-info.outputs.image-major-minor }}

      - name: Configure debug image tags
        id: debug-image-metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: |
            ${{ env.GHCR_REPO }}
            ${{ env.DOCKERHUB_REPO }}
          flavor:
            suffix=-debug
          tags: |
            type=raw,value=${{ needs.build-info.outputs.image-base-tag }}
            type=raw,value=v${{ needs.build-info.outputs.image-base-tag }}
            type=raw,value=${{ needs.build-info.outputs.image-major-minor }}
            type=raw,value=v${{ needs.build-info.outputs.image-major-minor }}

  build:
    name: Build/push image (${{ matrix.platform }})
    runs-on: ${{ matrix.runs-on }}
    needs: [build-info, build-tags]
    permissions:
      actions: read
      packages: write
    outputs:
      digest_amd64: ${{ steps.output-digests.outputs.amd64 }}
      digest_arm64: ${{ steps.output-digests.outputs.arm64 }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - runs-on: ubuntu-latest
          - runs-on: ubuntu-24.04-arm # Builds arm64 on arm64 hosts
            platform: linux/arm64
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: cmd/fluent-watcher/fluentbit/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ needs.build-tags.outputs.labels }}
          provenance: false
          build-args:
            FLUENT_BIT_BASE_VERSION=${{ needs.build-info.outputs.version }}
          outputs: type=image,"name=${{ env.GHCR_REPO }},${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Output image digests
        id: output-digests
        run: |
          platform="${{ matrix.platform }}"
          # Convert "linux/amd64" or "linux/arm64" to just amd64 or arm64 for the output variable name
          arch=${platform#linux/}
          echo "${arch}=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  build-debug:
    name: Build/push debug image (${{ matrix.platform }})
    runs-on: ${{ matrix.runs-on }}
    needs: [build-info, build-tags]
    permissions:
      packages: write
    outputs:
      digest_amd64: ${{ steps.output-digests.outputs.amd64 }}
      digest_arm64: ${{ steps.output-digests.outputs.arm64 }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - runs-on: ubuntu-latest
          - runs-on: ubuntu-24.04-arm # Builds arm64 on arm64 hosts
            platform: linux/arm64
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: cmd/fluent-watcher/fluentbit/Dockerfile.debug
          platforms: ${{ matrix.platform }}
          labels: ${{ needs.build-tags.outputs.labels }}
          provenance: false
          build-args:
            FLUENT_BIT_BASE_VERSION=${{ needs.build-info.outputs.version }}
          outputs: type=image,"name=${{ env.GHCR_REPO }},${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Output image digests
        id: output-digests
        run: |
          platform="${{ matrix.platform }}"
          # Convert "linux/amd64" to just amd64 for the output variable name
          arch=${platform#linux/}
          echo "${arch}=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  manifest:
    name: Publish image manifests
    runs-on: ubuntu-latest
    permissions:
      packages: write
    needs: [build, build-debug, build-tags]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Create image manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          push: true
          tags: ${{ needs.build-tags.outputs.tags }}
          sources: |
            ${{ env.GHCR_REPO }}@${{ needs.build.outputs.digest_amd64 }}
            ${{ env.GHCR_REPO }}@${{ needs.build.outputs.digest_arm64 }}

      - name: Create debugimage manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          push: true
          tags: ${{ needs.build-tags.outputs.debug-tags }}
          sources: |
            ${{ env.GHCR_REPO }}@${{ needs.build-debug.outputs.digest_amd64 }}
            ${{ env.GHCR_REPO }}@${{ needs.build-debug.outputs.digest_arm64 }}
