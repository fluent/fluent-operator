name: Publish Fluentd image

on:
  workflow_dispatch:

env:
  GHCR_REPO: 'ghcr.io/${{ github.repository }}/fluentd'
  DOCKERHUB_REPO: 'kubesphere/fluentd'

permissions:
  contents: read
  packages: write

jobs:
  get-version:
    name: Fetch fluentd version
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get-version.outputs.VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: ${{ github.ref }}

      - name: Read fluentd version from VERSION file
        id: get-version
        run: |
          VERSION=$(cat cmd/fluent-watcher/fluentd/VERSION)
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

  determine-tags:
    needs: [get-version]
    runs-on: ubuntu-latest
    name: Determine image tags
    outputs:
      IMAGE_BASE_TAG: ${{ steps.determine-tags.outputs.IMAGE_BASE_TAG }}
      IMAGE_MAJOR_MINOR: ${{ steps.determine-tags.outputs.IMAGE_MAJOR_MINOR }}

    steps:
      - name: Determine image version tag
        id: determine-tags
        run: |
          VERSION=${{ needs.get-version.outputs.VERSION }}
          VERSION_WITHOUT_V=${VERSION#v}
          MAJOR_MINOR=$(echo $VERSION_WITHOUT_V | cut -d. -f1-2)

          if skopeo inspect docker://${{ env.GHCR_REPO }}:${VERSION}; then
            echo "${VERSION} tag already exists, assuming we're building a patch release!"
            LATEST_PATCH_VERSION=$(skopeo list-tags docker://${{ env.GHCR_REPO }} | grep -E "${VERSION}-[0-9]+" | sort | uniq | tail -1 | tr -d \" | cut -d'-' -f2 | tr -d ',')
            NEW_PATCH_VERSION=$((LATEST_PATCH_VERSION + 1))
            IMAGE_BASE_TAG="${VERSION}-${NEW_PATCH_VERSION}"
            echo "Building patch release ${IMAGE_BASE_TAG}!"
          else
            echo "${VERSION} tag does not exist, assuming we're building a new release!"
            IMAGE_BASE_TAG="${VERSION}"
          fi

          echo "IMAGE_BASE_TAG=$IMAGE_BASE_TAG" >> $GITHUB_OUTPUT
          echo "IMAGE_MAJOR_MINOR=$MAJOR_MINOR" >> $GITHUB_OUTPUT

  build:
    name: Build/push image (${{ matrix.platform }})
    runs-on: ${{ matrix.runs-on }}
    needs: [get-version,determine-tags]
    permissions:
      actions: read
      packages: write
    outputs:
      digest_amd64: ${{ steps.output-digests.outputs.amd64 }}
      digest_arm64: ${{ steps.output-digests.outputs.arm64 }}
      tags: ${{ steps.image-metadata.outputs.tags }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
        include:
          - runs-on: ubuntu-latest
          - runs-on: ubuntu-24.04-arm # Builds arm64 on arm64 hosts
            platform: linux/arm64
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Install Go
        id: setup-go
        uses: actions/setup-go@0aaccfd150d50ccaeb58ebd88d36e91967a5f35b # v5.4.0
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Configure image tags
        id: image-metadata
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: |
            ${{ env.GHCR_REPO }}
            ${{ env.DOCKERHUB_REPO }}
          flavor:
            latest=false
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.determine-tags.outputs.IMAGE_BASE_TAG }}
            type=raw,value=v${{ needs.determine-tags.outputs.IMAGE_BASE_TAG }}
            type=raw,value=${{ needs.determine-tags.outputs.IMAGE_MAJOR_MINOR }}
            type=raw,value=v${{ needs.determine-tags.outputs.IMAGE_MAJOR_MINOR }}

      - name: Build and push image
        id: build
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          context: .
          file: cmd/fluent-watcher/fluentd/Dockerfile
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.image-metadata.outputs.labels }}
          provenance: false
          build-args: |
            GO_VERSION=${{ steps.setup-go.outputs.go-version }}
            FLUENTD_BASE_VERSION=${{ needs.get-version.outputs.VERSION }}
          outputs: type=image,"name=${{ env.GHCR_REPO }},${{ env.DOCKERHUB_REPO }}",push-by-digest=true,name-canonical=true,push=true

      - name: Output image digests
        id: output-digests
        run: |
          platform="${{ matrix.platform }}"
          # Convert "linux/amd64" to just amd64 for the output variable name
          arch=${platform#linux/}
          echo "${arch}=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  manifest:
    name: Publish image manifest
    runs-on: ubuntu-latest
    needs: [build, determine-tags]
    steps:
      - name: Login to GHCR
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: docker.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Create image manifest
        uses: int128/docker-manifest-create-action@v2
        with:
          push: true
          tags: ${{ needs.build.outputs.tags }} # Includes GHCR and Docker Hub
          sources: |
            ${{ env.GHCR_REPO }}@${{ needs.build.outputs.digest_amd64 }}
            ${{ env.GHCR_REPO }}@${{ needs.build.outputs.digest_arm64 }}
